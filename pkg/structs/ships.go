package structs

import "github.com/ngld/fso-table-parser/pkg/parser"

const maxFireballTypes = 32

func NewShipParticleEffect(name string) parser.ContainerItem {
	return Section(name,
		IntegerValue("+Max particles"),
		IntegerValue("+Min particles"),
		FloatValue("+Max Radius"),
		FloatValue("+Min Radius"),
		FloatValue("+Max Lifetime"),
		FloatValue("+Min Lifetime"),
		FloatValue("+Max Velocity"),
		FloatValue("+Min Velocity"),
		FloatValue("+Normal Variance"),
	)
}

func NewWarpEffect(prefix string) []parser.ContainerChild {
	items := []parser.ContainerChild{
		StringValue(prefix + " type"),
		StringValue(prefix + " Start Sound"),
		StringValue(prefix + " End Sound"),
	}

	if prefix == "$Warpout" {
		items = append(items, FloatValue(prefix+" engage time"))
	}

	items = append(items,
		FloatValue(prefix+" speed"),
		FloatValue(prefix+" time"),
	)

	if prefix == "$Warpin" {
		items = append(items, FloatValue(prefix+" decel exp"))
	} else {
		items = append(items, FloatValue(prefix+" accel exp"))
	}

	items = append(items,
		FloatValue(prefix+" radius"),
		StringValue(prefix+" animation"),
	)

	if prefix == "$Warpout" {
		items = append(items, FloatValue("$Player warpout speed"))
	}

	return items
}

func NewShipsTable() []parser.ContainerItem {
	return []parser.ContainerItem{
		Section("#Default Player Ship",
			Required(StringValue("$Name")),
		),
		Section("#Engine Wash Info",
			Multi(Section("$Name",
				Required(StringValue("")),
				Nocreate(),
				FloatValue("$Angle"),
				FloatValue("$Radius Mult"),
				FloatValue("$Length"),
				FloatValue("$Intensity"),
			)),
		),
		Required(Section("#Ship Classes",
			Multi(Section("$Name", JoinChildren([]parser.ContainerChild{
				Required(StringValue("")),
				Nocreate(),
				BooleanFlag("+remove"),
				StringValue("+Use Template"),
				Either(
					StringValue("$Alt Name"),
					StringValue("$Display Name"),
				),
				StringValue("$Short name"),
				StringValue("$Species"),
				StringValue("+Type"),
				StringValue("+Maneuverability"),
				StringValue("+Armor"),
				StringValue("+Manufacturer"),
				MultilineStringValue("+Description"),
				StringValue("+Tech Title"),
				MultilineStringValue("+Tech Description"),
				StringValue("+Length"),
				StringValue("+Gun Mounts"),
				StringValue("+Missile Banks"),
				EnumValue("$Selection Effect", "FS2", "FS1", "off"),
				StringValue("$Cockpit POF file"),
				Vec3dValue("+Cockpit offset:"),
				Multi(Section("$Cockpit Display",
					Required(StringValue("+Texture")),
					IntegerListValue("+Offsets", 2),
					Required(IntegerListValue("+Size", 2)),
					StringValue("+Background"),
					StringValue("+Foreground"),
					Required(StringValue("+Display Name")),
				)),
				StringValue("$POF file"),
				StringValue("$POF file Techroom"),
				Section("$Texture Replace",
					Multi(Section("+old",
						Required(StringValue("")),
						Required(StringValue("+new")),
					)),
				),
				StringValue("$POF target file"),
				IntegerValue("$POF target LOD"),
				IntegerListValue("$Detail distance", 4),
				Vec3dValue("$ND"),
				IntegerValue("$Collision LOD"),
				BooleanValue("$Enable Team Colors"),
				StringValue("$Default Team"),
				BooleanValue("$Show damage"),
				StringValue("$Damage Lightning Type"),
				Section("$Impact",
					StringValue("Damage Type"),
				),
				NewShipParticleEffect("$Impact Spew"),
				NewShipParticleEffect("$Damage Spew"),
				Section("$Collision Physics",
					FloatValue("+Bounce"),
					FloatValue("+Both Small Bounce"),
					FloatValue("+Friction"),
					FloatValue("+Rotation Factor"),
					FloatValue("+Landing Max Forward Vel"),
					FloatValue("+Landing Min Forward Vel"),
					FloatValue("+Landing Max Descent Vol:"),
					FloatValue("+Landing Max Horizontal Vel"),
					FloatValue("+Landing Max Angle"),
					FloatValue("+Landing Min Angle"),
					FloatValue("+Landing Max Rotate Angle"),
					FloatValue("+Reorient Max Forward Vel"),
					FloatValue("+Reorient Min Forward Vel"),
					FloatValue("+Reorient Max Descent Vel"),
					FloatValue("+Reorient Max Horizontal Vel"),
					FloatValue("+Reorient Max Angle"),
					FloatValue("+Reorient Min Angle"),
					FloatValue("+Reorient Max Rotate Angle"),
					FloatValue("+Reorient Speed Mult"),
					FloatValue("+Landing Rest Angle"),
					StringValue("+Landing Sound"),
					StringValue("+Collision Sound Light"),
					StringValue("+Collision Sound Heavy"),
					StringValue("+Collision Sound Shielded"),
				),
				Section("$Debris",
					FloatValue("+Min Lifetime"),
					FloatValue("+Max Lifetime"),
					FloatValue("+Min Speed"),
					FloatValue("+Max Speed"),
					FloatValue("+Min Rotation speed"),
					FloatValue("+Max Rotation speed"),
					StringValue("+Damage Type"),
					FloatValue("+Min Hitpoints"),
					FloatValue("+Max Hitpoints"),
					FloatValue("+Damage Multiplier"),
					FloatValue("+Lightning Arc Percent:"),
					StringValue("+Ambient Sound"),
					StringValue("+Collision Sound Light"),
					StringValue("+Collision Sound Heavy"),
					StringValue("+Explosion Sound"),
					StringValue("+Generic Debris POF file"),
					IntegerValue("+Generic Debris Spew Num"),
				),
				FloatValue("$Density"),
				FloatValue("$Damp"),
				FloatValue("$Rotdamp"),
				FloatValue("$Banking Constant"),
				Vec3dValue("$Max Velocity"),
				Vec3dValue("$Player Minimum Velocity"),
				Vec3dValue("$Rotation Time"),
				FloatValue("$Rear Velocity"),
				FloatValue("$Forward accel"),
				FloatValue("$Forward decel"),
				FloatValue("$Slide accel"),
				FloatValue("$Slide decel"),
				BooleanSection("$Glide",
					BooleanValue("+Dynamic Glide Cap"),
					FloatValue("+Max Glide Speed"),
					FloatValue("+Glide Accel Mult"),
				),
				BooleanValue("$Use Newtonian Dampening"),
				Section("$Autoaim FOV",
					Required(FloatValue("")),
					BooleanFlag("+Converging Autoaim"),
					FloatValue("+Minimum Distance"),
					StringValue("+Autoaim Lock Snd"),
					StringValue("+Autoaim Lost Snd"),
				),
				Section("$Convergence",
					Section("+Automatic",
						FloatValue("+Minimum Distance"),
					),
					Section("+Standard",
						Required(FloatValue("+Distance")),
					),
					Vec3dValue("+Offset"),
				),
			},
				NewWarpEffect("$Warpin"),
				NewWarpEffect("$Warpout"),
				[]parser.ContainerChild{
					FloatValue("$Expl inner rad"),
					FloatValue("$Expl outer rad"),
					FloatValue("$Expl damage"),
					FloatValue("$Expl blast"),
					BooleanValue("$Expl Propagates"),
					BooleanValue("$Expl Splits Ship"),
					FloatValue("$Propagating Expl Radius Multiplier"),
					FloatValue("$Expl Visual Rad"),
					IntegerValue("$Base Death-Roll Time"),
					FloatValue("$Death-Roll Explosion Radius Mult"),
					FloatValue("$Death-Roll Explosion Intensity Mult"),
					FloatValue("$Death FX Explosion Radius Mult"),
					IntegerValue("$Death FX Explosion Count"),
					FloatValue("$Death Roll Rotation Multiplier"),
					FloatValue("$Death Roll X rotation Cap"),
					FloatValue("$Death Roll Y rotation Cap"),
					FloatValue("$Death Roll Z rotation Cap"),
					NewShipParticleEffect("$Ship Splitting Particles"),
					StringValue("$Ship Death Effect"),
					NewShipParticleEffect("$Ship Death Particles"),
					NewShipParticleEffect("$Alternate Death Particles"),
					FloatValue("$Vaporize Percent Chance"),
					StringValue("$Shockwave Damage Type"),
					FloatValue("$Shockwave Speed"),
					FloatValue("$Shockwave Count"),
					StringValue("$Shockwave model"),
					StringValue("$Shockwave name"),
					IntegerListValue("$Explosion Animations", maxFireballTypes),
					FloatValue("$Weapon Model Draw Distance"),
					// TODO: Proper allowed weapon parsing
					WeaponBanksValue("$Allowed PBanks"),
					WeaponBanksValue("$Allowed Dogfight PBanks"),
					StringListValue("$Default PBanks"),
					IntegerListValue("$PBank Capacity", 3),
					BooleanListValue("$Show Primary Models"),
					WeaponBanksValue("$Allowed SBanks"),
					WeaponBanksValue("$Allowed Dogfight SBanks"),
					StringListValue("$Default SBanks"),
					IntegerListValue("$SBank Capacity", 4),
					BooleanListValue("$Show Secondary Models"),
					FloatValue("$Ship Recoil Modifier"),
					Section("$Shields",
						Required(FloatValue("")),
						FloatValue("+Auto Spread"),
						FloatValue("+Minimum Weapon Span"),
						BooleanListValue("+Allow Bypass"),
						IntegerValue("+Spread From LOD"),
					),
					StringListValue("$Model Point Shield Controls"),
					ColorValue("$Shield Color"),
					StringValue("$Shield Impact Explosion"),
					FloatValue("$Max Shield Recharge"),
					FloatValue("$Power Output"),
					FloatValue("$Shield Regeneration Rate"),
					FloatValue("$Support Shield Repair Rate"),
					FloatValue("$Weapon Regeneration Rate"),
					FloatValue("$Shield to Weapon Transfer Quantity"),
					FloatValue("$Shield to Weapon Transfer Efficiency"),
					FloatValue("$Shield to Weapon Transfer Speed"),
					FloatValue("$Weapon to Shield Transfer Quantity"),
					FloatValue("$Weapon to Shield Transfer Efficiency"),
					FloatValue("$Weapon to Shield Transfer Speed"),
					Either(
						FloatValue("$Max Overclock Speed"),
						FloatValue("$Max Oclk Speed"),
					),
					Either(
						FloatValue("$Max Weapon Energy"),
						FloatValue("$Max Weapon Eng"),
					),
					FloatValue("$Hitpoints"),
					FloatValue("$Hull Repair Rate"),
					FloatValue("$Support Hull Repair Rate"),
					FloatValue("$Subsystem Repair Rate"),
					FloatValue("$Support Subsystem Repair Rate"),
					StringValue("$Armor Type"),
					StringValue("$Shield Armor Type"),
					Section("$Flags",
						Required(StringListValue("")),
						BooleanFlag("+noreplace"),
					),
					StringValue("$AI Class"),
					BooleanSection("$Afterburner",
						Vec3dValue("+Aburn Max Vel"),
						FloatValue("+Aburn For accel"),
						FloatValue("+Aburn Max Reverse Vel"),
						FloatValue("+Aburn Rev accel"),
						FloatValue("+Aburn Fuel"),
						FloatValue("+Aburn Burn Rate"),
						FloatValue("+Aburn Rec Rate"),
						FloatValue("+Aburn Minimum Start Fuel"),
						FloatValue("+Aburn Minimum Fuel to Burn"),
						FloatValue("+Aburn Cooldown Time"),
					),
					Section("$Trails",
						StringValue("+Bitmap"),
						FloatValue("+Bitmap Stretch"),
						FloatValue("+Width"),
						FloatValue("+Alpha"),
						FloatValue("+Alpha End"),
						FloatValue("+Alpha Decay Exponent"),
						FloatValue("+Life"),
						FloatValue("+Spread"),
						IntegerValue("+Faded out Sections"),
					),
					StringValue("$Countermeasure type"),
					IntegerValue("$Countermeasures"),
					IntegerValue("$Scan time"),
					FloatValue("$Scan range Normal"),
					FloatValue("$Scan range Capital"),
					FloatValue("$Ask Help Shield Percent"),
					FloatValue("$Ask Help Hull Percent"),
					StringValue("$EngineSnd"),
					FloatValue("$Minimum Engine Volume"),
					StringValue("$GlideStartSnd"),
					StringValue("$GlideEndSnd"),
					StringValue("$Flyby Sound"),
					// ship sounds
					StringValue("$CockpitEngineSnd"),
					StringValue("$FullThrottleSnd"),
					StringValue("$ZeroThrottleSnd"),
					StringValue("$ThrottleUpSnd"),
					StringValue("$ThrottleDownSnd"),
					StringValue("$AfterburnerSnd"),
					StringValue("$AfterburnerEngageSnd"),
					StringValue("$AfterburnerFailedSnd"),
					StringValue("$MissileTrackingSnd"),
					StringValue("$MissileLockedSnd"),
					StringValue("$PrimaryCycleSnd"),
					StringValue("$SecondaryCycleSnd"),
					StringValue("$TargetAcquiredSnd"),
					StringValue("$PrimaryFireFailedSnd"),
					StringValue("$SecondaryFireFailedSnd"),
					StringValue("$HeatSeekerLaunchWarningSnd"),
					StringValue("$AspectSeekerLaunchWarningSnd"),
					StringValue("$MissileLockWarningSnd"),
					StringValue("$HeatSeekerProximityWarningSnd"),
					StringValue("$AspectSeekerProximityWarningSnd"),
					StringValue("$MissileEvadedSnd"),
					StringValue("$CargoScanningSnd"),

					StringValue("$DeathRollSnd"),
					StringValue("$ExplosionSnd"),
					StringValue("$SubsysExplosionSnd"),

					Vec3dValue("$Closeup_pos"),
					FloatValue("$Closeup_zoom"),
					Vec3dValue("$Closeup_pos_targetbox"),
					FloatValue("$Closeup_zoom_targetbox"),
					Vec3dValue("$Topdown offset"),
					StringValue("$Shield_icon"),
					StringValue("$Ship_icon"),
					EnumValue("$Model Icon Direction", "top", "bottom", "front", "back", "left", "right"),
					StringValue("$Ship_anim"),
					StringValue("$Ship_overhead"),

					Section("$Briefing icon",
						Required(StringValue("+Regular")),
						Required(StringValue("+Fade")),
						Required(StringValue("+Highlight")),
					),
					Section("$Briefing icon with cargo",
						Required(StringValue("+Regular")),
						Required(StringValue("+Fade")),
						Required(StringValue("+Highlight")),
					),
					Section("$Briefing wing icon",
						Required(StringValue("+Regular")),
						Required(StringValue("+Fade")),
						Required(StringValue("+Highlight")),
					),
					Section("$Briefing wing icon with cargo",
						Required(StringValue("+Regular")),
						Required(StringValue("+Fade")),
						Required(StringValue("+Highlight")),
					),

					IntegerValue("$Score"),
					StringValue("$Thruster Normal Flame"),
					StringValue("$Thruster Afterburner Flame"),
					StringValue("$Thruster Bitmap 1"),
					StringValue("$Thruster Bitmap 1a"),
					FloatValue("$Thruster01 Radius factor"),
					StringValue("$Thruster Bitmap 2"),
					StringValue("$Thruster Bitmap 2a"),
					FloatValue("$Thruster02 Radius factor"),
					Deprecated(FloatValue("$Thruster01 Length factor"), "Deprecated spelling: \"$Thruster01 Length factor:\".  Use \"$Thruster02 Length factor:\" instead."),
					FloatValue("$Thruster02 Length factor"),
					StringValue("$Thruster Bitmap 3"),
					StringValue("$Thruster Bitmap 3a"),
					FloatValue("$Thruster03 Radius factor"),
					StringValue("$Thruster Bitmap Distortion"),
					StringValue("$Thruster Bitmap Distortion a"),
					FloatValue("$Thruster Distortion Radius factor"),
					FloatValue("$Thruster Distortion Length factor"),
					BooleanValue("$Thruster Distortion"),
					FloatValue("$Thruster Glow Noise Mult"),
					Multi(Section("$Thruster Particles",
						Either(
							StringValue("$Thruster Particle Bitmap"),
							StringValue("$Afterburner Particle Bitmap"),
						),
						Required(FloatValue("$Min Radius")),
						Required(FloatValue("$Max Radius")),
						Required(IntegerValue("$Min created")),
						Required(IntegerValue("$Max created")),
						Required(FloatValue("$Variance")),
					)),
					VoidValue("$Stealth"),
					Deprecated(IntegerValue("$max decals"), "The decal system has been deactivated in FSO builds. Entries will be discarded."),
					Multi(Section("$Trail",
						BooleanFlag("+ClearAll"),
						Required(Vec3dValue("+Offset")),
						Required(FloatValue("+Start Width")),
						Required(FloatValue("+End Width")),
						Required(FloatValue("+Start Alpha")),
						Required(FloatValue("+End Alpha")),
						FloatValue("+Alpha Decay Exponent"),
						Required(FloatValue("+Max Life")),
						FloatValue("+Spread"),
						Required(IntegerValue("+Spew Time")),
						Required(StringValue("+Bitmap")),
						FloatValue("+Bitmap Stretch"),
						IntegerValue("+Faded Out Sections"),
					)),
					Multi(Section("$Thruster",
						IntegerValue("+index"),
						StringFlagsValue(
							"+Used for",
							"Bank right",
							"Bank left",
							"Pitch up",
							"Pitch down",
							"Roll right",
							"Roll left",
							"Slide right",
							"Slide left",
							"Slide down",
							"Forward",
							"Reverse",
						),
						FloatListValue("+Position", 3),
						FloatListValue("+Normal", 3),
						StringValue("+Texture"),
						FloatValue("+Radius"),
						FloatValue("+Length"),
						StringValue("+StartSnd"),
						StringValue("+LoopSnd"),
						StringValue("+StopSnd"),
					)),
					StringListValue("$Glowpoint overrides"),
					Section("$Radar Image 2D",
						Required(StringValue("")),
						StringValue("$Radar color Image 2D"),
						IntegerValue("$Radar Image Size"),
						FloatValue("$3D Radar Blip Size Multiplier"),
					),
					// TODO: Support "Ship IFF Colours" alias
					Section("$Ship IFF Colors",
						Required(StringValue("+Seen By")),
						Required(StringValue("+When IFF Is")),
						Required(ColorValue("+As Color")),
					),
					Section("$Target Priority Groups",
						StringListValue(""),
						BooleanFlag("+Override"),
					),
					FloatValue("$EMP Resistance Modifier"),
					FloatValue("$Piercing Damage Draw Limit"),
					Multi(Section("$Path Metadata",
						Required(StringValue("")),
						Vec3dValue("+departure rvec"),
						FloatValue("+arrive speed multiplier"),
						FloatValue("+depart speed multiplier"),
					)),
					Multi(Section("$Subsystem",
						Required(SubsystemValue("")),
						StringValue("$Alt Subsystem Name"),
						StringValue("$Alt Damage Popup Subsystem Name"),
						StringValue("$Armor Type"),
						StringListValue("$Default PBanks"),
						StringListValue("$PBank Capacity"),
						StringListValue("$Default SBanks"),
						StringListValue("$SBank Capacity"),
						StringValue("$Engine Wash"),
						StringValue("$AliveSnd"),
						StringValue("$DeadSnd"),
						StringValue("$RotationSnd"),
						StringValue("$Turret Base RotationSnd"),
						StringValue("$Turret Gun RotationSnd"),
						FloatValue("$Turret BaseSnd Volume"),
						FloatValue("$Turret GunSnd Volume"),
						Section("$AWACS",
							FloatValue(""),
							FloatValue(""),
						),
						IntegerValue("$Maximum Barrel Elevation"),
						IntegerValue("$Turret Base FOV"),
						IntegerValue("$Turret Reset Delay"),
						FloatValue("$Turret Optimum Range"),
						IntegerValue("$Turret Direction Preference"),
						StringListValue("$Target Priority"),
						IntegerValue("$Max Turrets per Bomb"),
						IntegerValue("$Max Turrets per Target"),
						Section("$ROF",
							Either(
								BooleanFlag("+Use firingpoints"),
								FloatValue("+Multiplier"),
							),
						),
						Section("$Flags",
							Required(StringFlagsValue("",
								"untargetable",
								"carry no damage",
								"use multiple guns",
								"fire down normals",
								"check hull",
								"fixed firingpoints",
								"salvo mode",
								"no subsystem targeting",
								"fire on target",
								"reset when idle",
								"carry shockwave",
								"allow landing",
								"target requires fov",
								"fov edge checks",
								"no replace",
								"no live debris",
								"ignore if dead",
								"allow vanishing",
								"damage as hull",
								"starts locked",
								"no aggregate",
								"wait for animation",
								"play fire sound for player",
								"only target if can fire",
								"no disappear",
								"collide submodel",
								"allow destroyed rotation",
								"turret use ammo",
								"autorepair if disabled",
								"don't autorepair if disabled",
								"share fire direction",
								"no damage spew",
								"no impact debris",
							)),
							BooleanFlag("+noreplace"),
						),
						Deprecated(BooleanFlag("+non-targetable"), "Grammar error in table file.  Please change \"+non-targetable\" to \"+untargetable\"."),
						BooleanFlag("+untargetable"),
						BooleanFlag("+carry-no-damage"),
						BooleanFlag("+use-multiple-guns"),
						BooleanFlag("+fire-down-normals"),
						Multi(Section("$animation",
							Required(StringValue("")),
							// TODO: Add case switch based on previous value
							// triggered
							StringValue("$type"),
							IntegerValue("+sub_type"),
							StringValue("+sub_name"),
							IntegerValue("+delay"),
							IntegerValue("+reverse_delay"),
							Either(
								Vec3dValue("+absolute_angle"),
								Vec3dValue("+relative_angle"),
							),
							Vec3dValue("+velocity"),
							Vec3dValue("+acceleration"),
							IntegerValue("+time"),
							Section("$Sound",
								StringValue("+Start"),
								StringValue("+Loop"),
								StringValue("+End"),
								Required(FloatValue("+Radius")),
							),
						)),
					)),
				})...)),
		)),
	}
}
